#!/bin/bash
# osimg - create bootable disk images from macOS install files
#
# Copyright 2022 Bradley Sepos
# Released under the MIT License. See LICENSE for details.
# https://github.com/bradleysepos/osimg

NAME="osimg"
VERSION="1.7.0"

set -e
set -u

SELF="${0}"
SELF_NAME=$(basename "${SELF}")
HELP="\
usage: ${SELF_NAME} [-hv]
       ${SELF_NAME} [-a] source [destination]
where:
   -h  display this help text
   -v  display version information
   -a  attach/mount final image when complete"

# Ejects the container device associated with a disk image
function eject_container {  # eject_container $IMAGEFILE
    IMAGEFILE="${1:-}"
    [[ "${IMAGEFILE}" == "" ]] && return 1
    OIFS="${IFS}"
    IFS=$'\n'
    DEVICES=($(hdiutil info | awk -F'\n' 'BEGIN { RS="================================================"; img="'"${IMAGEFILE}"'" } { found=0; for (i=1; i<=NF; i++) { if ($i ~ ("image-(path|alias) *: " img "$")) { found=1 } if ((found==1) && ($i ~ ("^/dev/disk[0-9]+\t"))) { split($i,out,"\t"); print out[1] }}}' | sort -u))
    IFS="${OIFS}"
    if [[ "${#DEVICES[@]}" -gt 0 ]]; then
        for DEVICE in "${DEVICES[@]}"; do
            diskutil eject "${DEVICE}" force >/dev/null 2>&1
            sleep 2
        done
    fi
}

# Cleans up temporary resources
function clean_up_quick {
    # Run all commands despite non-zero exit codes
    set +e

    # Detach images used for version detection and remove mount points
    if [[ "${SOURCE_TMP:-undefinedx}" != "undefinedx" ]]; then
        hdiutil detach "${BASE_MOUNT_TMP}" -force -quiet
        sleep 2
        eject_container "${SOURCE_TMP}/BaseSystem.dmg"
        sleep 2
        hdiutil detach "${IESD_MOUNT_TMP}" -force -quiet
        sleep 2
        rm -rf "${SOURCE_TMP}" >/dev/null 2>&1
    fi

    set -e
}
function clean_up {
    # Run quick clean
    clean_up_quick

    # Run all commands despite non-zero exit codes
    set +e

    # Remove destination (if zero bytes, to be safe)
    if [[ "${DEST:-undefinedx}" != "undefinedx" ]] && [[ "${DEST_NAME:-undefinedx}" != "undefinedx" ]]; then
        if [[ "${DEST_FILE:-undefinedx}" == true ]] && [[ -f "${DEST}/${DEST_NAME}" ]] && [[ ! -s "${DEST}/${DEST_NAME}" ]]; then
            rm -f "${DEST}/${DEST_NAME}" >/dev/null 2>&1
        fi
    fi

    # Detach images used for image creation
    if [[ "${IESD_MOUNT:-undefinedx}" != "undefinedx" ]] && [[ "${IMAGE_MOUNT:-undefinedx}" != "undefinedx" ]]; then
        hdiutil detach "${IESD_MOUNT}" -force -quiet
        hdiutil detach "${IMAGE_MOUNT}" -force -quiet
        sleep 2
    fi

    # Remove temporary files
    if [[ "${TEMP:-undefinedx}" != "undefinedx" ]]; then
        if [[ -e "${TEMP}" ]]; then
            rm -rf "${TEMP}" >/dev/null 2>&1
        fi
        if [[ -e "${TEMP}" ]]; then
            # Try again
            sleep 8
            rm -rf "${TEMP}" >/dev/null 2>&1
        fi
    fi

    set -e
}

# Cleans up on hard exit
function exit_hard {
    CODE="$?"
    trap - EXIT INT TERM
    if [[ "${CODE}" != "0" ]]; then
        echo "Signal caught; terminating."
    fi
    clean_up
    exit "${CODE}"
}

# It's a TRAP!
function ackbar_on {
    trap exit_hard EXIT INT TERM
}
function ackbar_off {
    trap - EXIT INT TERM
}

# Logs error message and exits
function exit_with_error {
    ackbar_off
    ERROR="${2}"
    echo "${ERROR}" >&2 && syslog -s -l error "${ERROR}"
    PRINT_HELP="${3:-false}"
    if [[ "${PRINT_HELP}" == true ]]; then
        echo -e "${HELP}"
    fi
    clean_up
    exit "${1}"
}

# Mac OS X 10.7 Lion
function make_osx_10_7 {

    # Save final image
    echo "Saving final image..."
    hdiutil makehybrid "${IESD}" -o "${IMAGE}.iso" -hfs -iso -quiet

    # Rename target
    mv "${IMAGE}.iso" "${DEST}/${DEST_NAME}"

}

# OS X 10.8 Mountain Lion
function make_osx_10_8 {

    # Same as Mac OS X 10.7 Lion
    make_osx_10_7

}

# OS X 10.9 Mavericks
function make_osx_10_9 {

    # Attach source
    hdiutil attach "${IESD}" -mountpoint "${IESD_MOUNT}" -nobrowse -quiet

    # Create temporary image
    echo "Creating temporary image..."
    hdiutil convert "${IESD_MOUNT}/BaseSystem.dmg" -o "${IMAGE}.sparsebundle" -format UDSB -quiet
    hdiutil resize "${IMAGE}.sparsebundle" -size 6g -quiet
    hdiutil attach "${IMAGE}.sparsebundle" -mountpoint "${IMAGE_MOUNT}" -owners on -nobrowse -quiet

    # Copy system packages
    echo "Copying system packages..."
    rm -rf "${IMAGE_MOUNT}/System/Installation/Packages"
    ditto "${IESD_MOUNT}/Packages" "${IMAGE_MOUNT}/System/Installation/Packages"

    # Eject source volumes
    hdiutil detach "${IESD_MOUNT}" -quiet
    hdiutil detach "${IMAGE_MOUNT}" -quiet

    # Shrink
    echo "Shrinking image..."
    hdiutil resize -quiet -size min "${IMAGE}.sparsebundle"

    # Save final image
    echo "Saving final image..."
    hdiutil makehybrid "${IMAGE}.sparsebundle" -o "${IMAGE}.iso" -hfs -iso -quiet

    # Rename target
    mv "${IMAGE}.iso" "${DEST}/${DEST_NAME}"

}

# OS X 10.10 Yosemite
function make_osx_10_10 {

    # Attach source
    hdiutil attach "${IESD}" -mountpoint "${IESD_MOUNT}" -nobrowse -quiet

    # Create temporary image
    echo "Creating temporary image..."
    hdiutil convert "${IESD_MOUNT}/BaseSystem.dmg" -o "${IMAGE}.sparsebundle" -format UDSB -quiet
    hdiutil resize "${IMAGE}.sparsebundle" -size 8g -quiet
    hdiutil attach "${IMAGE}.sparsebundle" -mountpoint "${IMAGE_MOUNT}" -owners on -nobrowse -quiet

    # Copy system packages
    echo "Copying system packages..."
    rm -rf "${IMAGE_MOUNT}/System/Installation/Packages"
    ditto "${IESD_MOUNT}/Packages" "${IMAGE_MOUNT}/System/Installation/Packages"
    ditto "${IESD_MOUNT}/BaseSystem.chunklist" "${IMAGE_MOUNT}/BaseSystem.chunklist"
    ditto "${IESD_MOUNT}/BaseSystem.dmg" "${IMAGE_MOUNT}/BaseSystem.dmg"
    echo '<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>Kernel Flags</key>
	<string>root-dmg=file:///BaseSystem.dmg</string>
</dict>
</plist>
' > "${IMAGE_MOUNT}/Library/Preferences/SystemConfiguration/com.apple.Boot.plist"

    # Eject source volumes
    hdiutil detach "${IESD_MOUNT}" -quiet
    hdiutil detach "${IMAGE_MOUNT}" -quiet

    # Shrink
    echo "Shrinking image..."
    hdiutil resize -quiet -size min "${IMAGE}.sparsebundle"

    # Save final image
    echo "Saving final image..."
    hdiutil makehybrid "${IMAGE}.sparsebundle" -o "${IMAGE}.iso" -hfs -iso -quiet

    # Rename target
    mv "${IMAGE}.iso" "${DEST}/${DEST_NAME}"

}

# OS X 10.11 El Capitan
function make_osx_10_11 {

    # Same as OS X 10.10 Yosemite
    make_osx_10_10

}

# macOS 10.12 Sierra
function make_osx_10_12 {

    # Same as OS X 10.11 El Capitan
    make_osx_10_11

}

# macOS 10.13 High Sierra
function make_osx_10_13 {

    # Attach source
    hdiutil attach "${IESD}" -mountpoint "${IESD_MOUNT}" -nobrowse -quiet

    # Create temporary image
    echo "Creating temporary image..."
    hdiutil convert "${IESD%InstallESD\.dmg}/BaseSystem.dmg" -o "${IMAGE}.sparsebundle" -format UDSB -quiet
    hdiutil resize "${IMAGE}.sparsebundle" -size 10g -quiet
    hdiutil attach "${IMAGE}.sparsebundle" -mountpoint "${IMAGE_MOUNT}" -owners on -nobrowse -quiet

    # Copy system packages
    echo "Copying system packages..."
    rm -rf "${IMAGE_MOUNT}/System/Installation/Packages"
    ditto "${IESD_MOUNT}/Packages" "${IMAGE_MOUNT}/System/Installation/Packages"
    ditto "${IESD%InstallESD\.dmg}/BaseSystem.chunklist" "${IMAGE_MOUNT}/BaseSystem.chunklist"
    ditto "${IESD%InstallESD\.dmg}/BaseSystem.dmg" "${IMAGE_MOUNT}/BaseSystem.dmg"
    echo '<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>Kernel Flags</key>
	<string>root-dmg=file:///BaseSystem.dmg</string>
</dict>
</plist>
' > "${IMAGE_MOUNT}/Library/Preferences/SystemConfiguration/com.apple.Boot.plist"

    # Eject source volumes
    hdiutil detach "${IESD_MOUNT}" -quiet
    hdiutil detach "${IMAGE_MOUNT}" -quiet

    # Shrink
    echo "Shrinking image..."
    hdiutil resize -quiet -size min "${IMAGE}.sparsebundle"

    # Save final image
    echo "Saving final image..."
    hdiutil makehybrid "${IMAGE}.sparsebundle" -o "${IMAGE}.iso" -hfs -iso -quiet

    # Rename target
    mv "${IMAGE}.iso" "${DEST}/${DEST_NAME}"

}

# macOS 10.14 Mojave
function make_osx_10_14 {

    # Same as macOS 10.13 High Sierra
    make_osx_10_13

}

# macOS 10.15 Catalina
function make_osx_10_15 {

    # Same as macOS 10.14 Mojave
    make_osx_10_14

}

# macOS 11 Big Sur
function make_osx_11 {

    exit_with_error 1 "${SELF_NAME}: support for macOS 11 Big Sur not yet implemented"

}

# macOS 12 Monterey
function make_osx_12 {

    exit_with_error 1 "${SELF_NAME}: support for macOS 12 Monterey not yet implemented"
}

# Super user only, except when printing help or version information
SUID=$(id -u root)
if [[ "${UID}" != "${SUID}" ]] && ( [[ "$#" -eq 0 ]] || grep -qv '^-\(h\|v\)' <<< "${1}" ); then
    exit_with_error 1 "${SELF_NAME}: must be run as root, e.g. sudo ${SELF_NAME}"
fi

# Arguments
ATTACH=false
DEST=""
SOURCE=""
OPTIND=1
while getopts ":ahv" OPT; do
    case "${OPT}" in
        a)
            # Attach
            ATTACH=true
            ;;
        h)
            # Print help and exit
            echo -e "${HELP}"
            exit 0
            ;;
        v)
            # Print version and exit
            echo "${NAME} ${VERSION}"
            exit 0
            ;;
        :)
            # Option without required argument
            exit_with_error 1 "${SELF_NAME}: option -${OPTARG} requires a value" true
            ;;
        \?)
            # Invalid option specified
            exit_with_error 1 "${SELF_NAME}: invalid option: -${OPTARG}" true
            ;;
    esac
done
shift $((${OPTIND} - 1))
set +u
if [[ -n ${1} ]]; then
    SOURCE="${1}"
fi
if [[ -n ${2} ]]; then
    DEST="${2}"
fi
set -u

# Validate arguments count
if [[ "$#" -gt 2 ]]; then
    # Too many arguments
    exit_with_error 1 "${SELF_NAME}: too many arguments" true
fi

# Validate source path
if [[ "${SOURCE}" == "" ]]; then
    # Source path not specified
    exit_with_error 1 "${SELF_NAME}: source path not specified" true
elif [[ ! -e "${SOURCE}" ]]; then
    # Source path does not exist
    exit_with_error 1 "${SELF_NAME}: source path does not exist: ${SOURCE}"
fi

# Validate source is or contains a disk image
if hdiutil imageinfo -format "${SOURCE}/Contents/SharedSupport/SharedSupport.dmg" >/dev/null 2>&1; then
    # Source is an app bundle, disk image found inside (11.x)
    IESD="${SOURCE}/Contents/SharedSupport/SharedSupport.dmg"
elif hdiutil imageinfo -format "${SOURCE}/Contents/SharedSupport/InstallESD.dmg" >/dev/null 2>&1; then
    # Source is an app bundle, disk image found inside (10.x)
    IESD="${SOURCE}/Contents/SharedSupport/InstallESD.dmg"
elif hdiutil imageinfo -format "${SOURCE}" >/dev/null 2>&1; then
    # Source is a disk image (10.x InstallESD.dmg)
    IESD="${SOURCE}"
else
    # Unable to locate an installer image
    exit_with_error 1 "${SELF_NAME}: unable to locate an installer image"
fi

# Validate destination path
if [[ "${DEST}" != "" ]] && [[ -e "${DEST}" ]] && [[ ! -d "${DEST}" ]]; then
    # Destination file already exists
    exit_with_error 1 "${SELF_NAME}: destination file already exists: ${DEST}"
fi

# Internal vars
DEST_FILE=false
DEST_MKDIR=false
VERSION_PREFIX=""
VERSION_ARRAY=("" "" "" "")
VERSION=""
VERSION_BUNDLE_NAME=""
VERSION_NAME=""
VERSION_BUILD=""
VERSION_PRETTY=""

# In case of fully operational battle station
ackbar_on

# Detect and validate source version
SOURCE_TMP=$(mktemp -d "${TMPDIR:-/tmp/}${NAME}-XXXXXX")
IESD_MOUNT_TMP="${SOURCE_TMP}/installesd.mount"
BASE_MOUNT_TMP="${SOURCE_TMP}/basesystem.mount"
mkdir "${IESD_MOUNT_TMP}" 2>/dev/null
mkdir "${BASE_MOUNT_TMP}" 2>/dev/null
if hdiutil attach "${IESD}" -mountpoint "${IESD_MOUNT_TMP}" -nobrowse -noverify -quiet; then
    ARCHIVE_PATH=""
    if [[ -r "${IESD_MOUNT_TMP}/com_apple_MobileAsset_MacSoftwareUpdate/com_apple_MobileAsset_MacSoftwareUpdate.xml" ]]; then
        # macOS 11+, get path to archive
        ARCHIVE_PATH=$(/usr/libexec/PlistBuddy -c 'Print :Assets:0:__RelativePath' "${IESD_MOUNT_TMP}/com_apple_MobileAsset_MacSoftwareUpdate/com_apple_MobileAsset_MacSoftwareUpdate.xml" 2>/dev/null)
        if [[ "${ARCHIVE_PATH}" != "" ]] && [[ -r "${IESD_MOUNT_TMP}/${ARCHIVE_PATH}" ]]; then
            # Attempt to extract base system image
            if ! unzip -jqq "${IESD_MOUNT_TMP}/${ARCHIVE_PATH}" AssetData/Restore/BaseSystem.chunklist AssetData/Restore/BaseSystem.dmg -d "${SOURCE_TMP}" 2>/dev/null; then
                # macOS 12+ archive does not have a base system image
                # Attempt to extract the system version plist directly
                if ! unzip -jqq "${IESD_MOUNT_TMP}/${ARCHIVE_PATH}" AssetData/boot/SystemVersion.plist -d "${SOURCE_TMP}" 2>/dev/null; then
                    # Unable to locate system version plist
                    exit_with_error 1 "${SELF_NAME}: unable to locate system version plist"
                fi
            fi
        fi
    fi
    if [[ ! -e "${SOURCE_TMP}/SystemVersion.plist" ]]; then
        # Attempt to get the system version plist and related info from base system image
        if hdiutil attach "${SOURCE_TMP}/BaseSystem.dmg" -mountroot "${BASE_MOUNT_TMP}" -nobrowse -noverify -quiet || \
           hdiutil attach "${IESD_MOUNT_TMP}/BaseSystem.dmg" -mountroot "${BASE_MOUNT_TMP}" -nobrowse -noverify -quiet || \
           hdiutil attach "${IESD%InstallESD\.dmg}/BaseSystem.dmg" -mountroot "${BASE_MOUNT_TMP}" -nobrowse -noverify -quiet; then
            BASE_MOUNT_TMP=$(cd "${BASE_MOUNT_TMP}/"*" Base System" && pwd -P)
                if ! cp "${BASE_MOUNT_TMP}/System/Library/CoreServices/SystemVersion.plist" "${SOURCE_TMP}" 2>/dev/null; then
                    # Unable to locate system version plist
                    exit_with_error 1 "${SELF_NAME}: unable to locate system version plist"
                fi
                if ! cp "${BASE_MOUNT_TMP}/Install"*".app/Contents/Info.plist" "${SOURCE_TMP}" 2>/dev/null; then
                    # Unable to locate info plist
                    exit_with_error 1 "${SELF_NAME}: unable to locate info plist"
                fi
                VERSION_BUNDLE_NAME=$(/usr/libexec/PlistBuddy -c 'Print :CFBundleDisplayName' "${BASE_MOUNT_TMP}"/Install*.app/Contents/Info.plist)
                hdiutil detach "${BASE_MOUNT_TMP}" -quiet
        else
                # Unable to mount base system image
                exit_with_error 1 "${SELF_NAME}: unable to mount base system image
        eject the following volumes and quit Disk Utility before running ${NAME}
        $(hdiutil info | grep '/dev/disk' | grep -E -e 'Base System' | awk -F'\t' '{ print $1 FS $3 }' | sed 's/ /\\ /g')"
        fi
    fi
    hdiutil detach "${IESD_MOUNT_TMP}" -quiet
    if [[ ! -e "${SOURCE_TMP}/Info.plist" ]]; then
        # Attempt to get info plist from installer app bundle
        if ! cp "${SOURCE}/Contents/Info.plist" "${SOURCE_TMP}" 2>/dev/null; then
            # Unable to locate info plist
            exit_with_error 1 "${SELF_NAME}: unable to locate info plist"
        fi
    fi
    if [[ -e "${SOURCE_TMP}/SystemVersion.plist" ]]; then
        VERSION=$(/usr/libexec/PlistBuddy -c 'Print :ProductVersion' "${SOURCE_TMP}/SystemVersion.plist" 2>/dev/null)
        VERSION=$(echo "${VERSION}" | sed 's/^10\.16/11/')
        VERSION="${VERSION:-0}"
        [[ ! "${VERSION}" == *"."* ]] && VERSION="${VERSION}.0"
        [[ ! "${VERSION}" == *"."*"."* ]] && VERSION="${VERSION}.0"
        VERSION_BUNDLE_NAME=$(/usr/libexec/PlistBuddy -c 'Print :CFBundleDisplayName' "${SOURCE_TMP}/Info.plist")
        VERSION_BUILD=$(/usr/libexec/PlistBuddy -c 'Print :ProductBuildVersion' "${SOURCE_TMP}/SystemVersion.plist")
        VERSION_BUILD="${VERSION_BUILD:-0}"
    fi
else
    # Unable to mount source image
    exit_with_error 1 "${SELF_NAME}: unable to mount source image
eject the following volumes and quit Disk Utility before running ${NAME}
$(hdiutil info | grep '/dev/disk' | grep -E -e 'Install ?ESD' -e 'Shared Support' | awk -F'\t' '{ print $1 FS $3 }' | sed 's/ /\\ /g')"
fi
clean_up_quick
while read MAJOR MINOR PATCH BUILD; do
    VERSION_ARRAY=("${MAJOR}" "${MINOR}" "${PATCH}" "${BUILD}")
done <<< $(echo "${VERSION}.${VERSION_BUILD}" | awk -F '.' '{ print $1 " " $2 " " $3 " " $4 }')
if [[ "${VERSION_ARRAY[0]}" -gt "10" ]] || [[ "${VERSION_ARRAY[1]}" -gt "11" ]]; then
    # macOS era (10.12-10.15, 11+)
    VERSION_NAME="${VERSION_BUNDLE_NAME#Install macOS }"
    VERSION_PREFIX="macOS"
elif [[ "${VERSION_ARRAY[1]}" -gt "6" ]] && [[ "${VERSION_ARRAY[1]}" -lt "12" ]]; then
    # (Mac) OS X era (10.7-10.11)
    VERSION_NAME="${VERSION_BUNDLE_NAME#Install*OS X }"
    VERSION_PREFIX=$(echo "${VERSION_BUNDLE_NAME}" | sed -E -e 's/^Install ((Mac )?OS X)(.*)/\1/')
fi
if [[ "${VERSION_NAME:-}" != "" ]]; then
    VERSION_PRETTY="${VERSION_PREFIX} $(echo ${VERSION} | sed -E 's/(\.0)+$//') ${VERSION_NAME} (${VERSION_BUILD})"
    echo "${VERSION_PRETTY}"
    if [[ "${DEST}" == "" ]]; then
        ackbar_off # No clean up should be necessary at this point
        exit 0
    fi
else
    # Source invalid or version not supported
    exit_with_error 1 "${SELF_NAME}: source invalid or version not supported: ${VERSION}"
fi

# Translate specified destination
if [[ -d "${DEST}" ]] || [[ "${DEST:$((${#DEST}-1)):1}" == "/" ]]; then
    # Directory specified
    DEST_NAME="${VERSION_PRETTY}.iso"
    DEST="${DEST%/}" # Drop trailing slash
else
    # File specified
    DEST_NAME="${DEST##*/}" # Filename
    if [[ "${DEST}" == "${DEST_NAME}" ]]; then
        # No directory specified
        DEST="."
    else
        DEST="${DEST%/*}" # Directory without trailing slash
    fi
fi

# Create destination
if [[ ! -e "${DEST}/${DEST_NAME}" ]]; then

    # Create destination directory
    if [[ ! -e "${DEST}" ]]; then
        # Split destination path into array of incremental directories
        IFS='/' read -ra DEST_ARRAY <<< "${DEST}"
        if [[ "${#DEST_ARRAY[@]}" -gt 1 ]]; then
            for I in $(seq 1 $((${#DEST_ARRAY[@]} - 1))); do
                DEST_ARRAY[I]="${DEST_ARRAY[$((${I} - 1))]}/${DEST_ARRAY[I]}"
            done
        fi
        # Create nonexistent directories one level at a time
        for D in ${DEST_ARRAY[@]}; do
            if [[ ! -e "${D}" ]]; then
                if mkdir "${D}" >/dev/null 2>&1; then
                    # Set directory owner to invoker
                    chown -f $(who am i | awk '{ print $1 }') "${D}" >/dev/null 2>&1
                else
                    # Unable to create destination directory
                    exit_with_error 1 "${SELF_NAME}: unable to create destination directory: ${DEST}"
                fi
            fi
        done
    fi

    # Create destination file
    if [[ ! -e "${DEST}/${DEST_NAME}" ]] && touch "${DEST}/${DEST_NAME}" >/dev/null 2>&1; then
        DEST_FILE=true
    else
        # Unable to create destination file
        exit_with_error 1 "${SELF_NAME}: unable to create destination file"
    fi

else
    # Destination already exists
    exit_with_error 1 "${SELF_NAME}: destination already exists: ${DEST}/${DEST_NAME}"
fi

# Create temporary resources
TEMP=$(mktemp -d "${DEST}/${DEST_NAME}.XXXXXX")
IMAGE="${TEMP}/${NAME}-temp"
IMAGE_MOUNT="${TEMP}/${NAME}-temp.mount"
IESD_MOUNT="${TEMP}/${NAME}-installesd.mount"

# Build image
if [[ "${VERSION_ARRAY[0]}" -gt "10" ]]; then
    make_osx_"${VERSION_ARRAY[0]}"
else
    make_osx_"${VERSION_ARRAY[0]}"_"${VERSION_ARRAY[1]}"
fi

# Update ownership
echo "Updating ownership..."
chown -f $(who am i | awk '{ print $1 }') "${DEST}/${DEST_NAME}" >/dev/null 2>&1

# Attach final image
if [[ "${ATTACH}" == true ]]; then
    echo "Attaching..."
    hdiutil attach "${DEST}/${DEST_NAME}" -autoopen -verify -quiet
fi

# Remove temporary files
ackbar_off
echo "Cleaning up..."
clean_up

# Done
echo "Done."
exit 0
