#!/bin/bash
# osximg - create bootable disk images from Mac OS X install files
#
# Version 0.4.1 (2014-04-29)
# Improve validation. Do not require super user to print help/version.
#
# Version 0.4.0 (2014-04-29)
# Update API (osximg source -o path). Consolidate nearly all shared code.
#
# Version 0.3.0 (2014-04-29)
# Fix Lion. Add source validation. Use more robust temporary paths. Refactor.
#
# Version 0.2.0 (2014-04-29)
# Add support for Mountain Lion and Lion. Consolidate some code.
#
# Version 0.1.0 (2014-04-25)
# Initial development. Mavericks supported.

set -e
set -u

SELF="$0"
SELF_NAME=$(basename "$SELF")

# Defaults
ATTACH=false
FORMAT="iso"
SOURCE=""
TARGET=""
VERS="osx109"
HELP="\
usage: $SELF_NAME [-hv]
       $SELF_NAME source -o path [-a] [-f format] [-t version]
where:
   -h  display this help text
   -v  display version information
   -a  attach/mount final image when complete
   -f  specify format/method -- iso (default), apple (createinstallmedia 10.9+)
   -o  specify output path
   -t  specify target system version --
         Mavericks      (osx109)
         Mountain Lion  (osx108)
         Lion           (osx107)"
VERSION="\
osximg 0.4.1"

# Get source path
if [[ "$#" -gt 0 ]] && [[ ! "${1:0:1}" = "-" ]]; then
    SOURCE="$1"
    shift 1
fi

# Super users only, except when printing help or version information
SUID=$(id -u root)
if [[ "$UID" != "$SUID" ]] && ( [[ "$#" -eq 0 ]] || grep -qv '^-\(h\|v\)' <<< "$1" ); then
    ERROR="$SELF_NAME: cannot run as normal user, try sudo"
    echo "$ERROR" >&2 && syslog -s -l error "$ERROR"
    exit 1
fi

# Handle arguments
while getopts ":af:ho:t:v" OPT
do
    case "${OPT}"
    in
        a)
            # Attach
            ATTACH=true
            ;;
        f)
            # Method and format
            if ! echo -n "$OPTARG" | grep -q '^\(apple\|iso\)$' >/dev/null; then
                # Invalid option specified
                ERROR="$SELF_NAME: invalid option for -f: $OPTARG"
                echo "$ERROR" >&2 && syslog -s -l error "$ERROR"
                echo -e "$HELP"
                exit 1
            fi
            FORMAT="$OPTARG"
            ;;
        h)
            # Print help and exit
            echo -e "$HELP"
            exit 0
            ;;
        o)
            # Output path
            TARGET="$OPTARG"
            ;;
        t)
            # Target system version
            if ! echo -n "$OPTARG" | grep -q '^\(Mavericks\|osx109\|Mountain Lion\|osx108\|Lion\|osx107\)$' >/dev/null; then
                # Invalid option specified
                ERROR="$SELF_NAME: invalid option for -t: $OPTARG"
                echo "$ERROR" >&2 && syslog -s -l error "$ERROR"
                echo -e "$HELP"
                exit 1
            fi
            VERS="$OPTARG"
            case "$VERS"
            in
                "Mavericks")
                    VERS="osx109"
            esac
            ;;
        v)
            # Print version and exit
            echo -e "$VERSION"
            exit 0
            ;;
        :)
            # Option without required argument
            ERROR="$SELF_NAME: option -$OPTARG requires a value"
            echo "$ERROR" >&2 && syslog -s -l error "$ERROR"
            echo -e "$HELP"
            exit 1
            ;;
        \?)
            # Invalid option specified
            ERROR="$SELF_NAME: invalid option: -$OPTARG"
            echo "$ERROR" >&2 && syslog -s -l error "$ERROR"
            echo -e "$HELP"
            exit 1
            ;;
    esac
done

# Validate arguments count
shift $(($OPTIND - 1))
if [[ "$#" -gt 0 ]]; then
    # Too many arguments
    ERROR="$SELF_NAME: too many arguments"
    echo "$ERROR" >&2 && syslog -s -l error "$ERROR"
    echo -e "$HELP"
    exit 1
fi

# Validate paths
if [[ "$SOURCE" == "" ]]; then
    # Source path not specified
    ERROR="$SELF_NAME: source path not specified"
    echo "$ERROR" >&2 && syslog -s -l error "$ERROR"
    echo -e "$HELP"
    exit 1
elif [[ ! -e "$SOURCE" ]]; then
    # Source path does not exist
    ERROR="$SELF_NAME: source path does not exist: $SOURCE"
    echo "$ERROR" >&2 && syslog -s -l error "$ERROR"
    echo -e "$HELP"
    exit 1
elif [[ "$TARGET" == "" ]]; then
    # Output path not specified
    ERROR="$SELF_NAME: output path not specified"
    echo "$ERROR" >&2 && syslog -s -l error "$ERROR"
    echo -e "$HELP"
    exit 1
elif [[ -e "$TARGET" ]]; then
    # Output path already exists
    ERROR="$SELF_NAME: output path already exists: $TARGET"
    echo "$ERROR" >&2 && syslog -s -l error "$ERROR"
    echo -e "$HELP"
    exit 1
fi

# Function for Mac OS X 10.9 Mavericks, ISO/HFS hybrid bootable
function make_osx109_iso {

    # Attach source
    hdiutil attach "$IESD" -mountpoint "$IESD_MOUNT" -nobrowse -quiet

    # Create temporary image
    echo "Creating temporary image..."
    hdiutil convert "$IESD_MOUNT/BaseSystem.dmg" -o "$IMAGE" -format UDSB -quiet
    hdiutil resize "$IMAGE" -size 6g -quiet
    hdiutil attach "$IMAGE" -mountpoint "$IMAGE_MOUNT" -owners on -nobrowse -quiet

    # Copy system packages
    echo "Copying system packages..."
    rm "$IMAGE_MOUNT/System/Installation/Packages"
    ditto "$IESD_MOUNT/Packages" "$IMAGE_MOUNT/System/Installation/Packages"

    # Eject source volumes
    hdiutil detach "$IESD_MOUNT" -quiet
    hdiutil detach "$IMAGE_MOUNT" -quiet

    # Shrink
    echo "Shrinking image..."
    hdiutil resize -quiet -size min "$IMAGE"

    # Save final image
    echo "Saving final image..."
    hdiutil makehybrid "$IMAGE" -o "$TARGET" -hfs -iso -quiet

}

# Function for Mac OS X 10.9 Mavericks, Apple USB
function make_osx109_apple {

    # Eject potentially conflicting volume
    if [[ -e "$CIM_MOUNT" ]]; then
        hdiutil detach "$CIM_MOUNT" -quiet
        echo "Ejected already mounted volume $CIM_MOUNT to avoid conflicts."
    fi

    # Create temporary image and run createinstallmedia tool
    echo "Creating temporary image..."
    hdiutil create "$IMAGE" -fs HFS+ -size 8g -type SPARSEBUNDLE -nospotlight -quiet
    hdiutil attach "$IMAGE" -mountpoint "$IMAGE_MOUNT" -nobrowse -noverify -quiet
    "$CIM" --nointeraction --applicationpath "$SOURCE" --volume "$IMAGE_MOUNT" | grep -v --line-buffered '^\(Done\.\|Copy complete\.\)$'

    # Eject source volume
    hdiutil detach -quiet "$CIM_MOUNT"

    # Shrink
    echo "Shrinking image..."
    hdiutil resize "$IMAGE" -size min -quiet

    # Save final image
    echo "Saving final image..."
    hdiutil convert "$IMAGE" -o "$IMAGE.cdr" -format UDTO -quiet

    # Rename target
    mv "$IMAGE.cdr" "$TARGET"

}

# Function for Mac OS X 10.8 Mountain Lion, ISO/HFS hybrid bootable
function make_osx108_iso {

    # Save final image
    echo "Saving final image..."
    hdiutil makehybrid "$IESD" -o "$TARGET" -hfs -iso -quiet

}

# Function for Mac OS X 10.7 Lion, ISO/HFS hybrid bootable
function make_osx107_iso {

    # Save final image
    echo "Saving final image..."
    hdiutil makehybrid "$IESD" -o "$TARGET" -hfs -iso -quiet

}

# Validate format
if [[ "$FORMAT" == "apple" ]] && [[ "$VERS" != "osx109" ]]; then
    # Format not supported
    ERROR="$SELF_NAME: format '$FORMAT' (createinstallmedia) not supported for target system versions prior to Mac OS X 10.9 Mavericks"
    echo "$ERROR" >&2 && syslog -s -l error "$ERROR"
    echo -e "$HELP"
    exit 1
fi

# Version defaults
case "$VERS"
in
    osx109)
        APP="Install OS X Mavericks.app"
        CIM="$SOURCE/Contents/Resources/createinstallmedia"
        CIM_MOUNT="/Volumes/Install OS X Mavericks"
        ;;
    osx108)
        APP="Install OS X Mountain Lion.app"
        ;;
    osx107)
        APP="Install Mac OS X Lion.app"
        ;;
esac
IESD="$SOURCE/Contents/SharedSupport/InstallESD.dmg"

# Validate source
SOURCE_VALID=false
CIM="${CIM:-}"
if hdiutil imageinfo -format "$IESD" >/dev/null 2>&1 && ( [[ "$CIM" == "" ]] || [[ -e "$CIM" ]] ); then
    # Got app bundle, image located
    # CIM located or not needed
    SOURCE_VALID=true;
elif hdiutil imageinfo -format "$SOURCE" >/dev/null 2>&1 && [[ "$CIM" == "" ]]; then
    # Got image
    SOURCE_VALID=true;
    IESD="$SOURCE"
fi

if $SOURCE_VALID; then

    # Create temporary directories
    TARGET_NAME=$(basename "$TARGET")
    TEMP=$(mktemp -d "$TARGET Temporary Files XXXXXX")
    IMAGE="$TEMP/$TARGET_NAME.sparsebundle"
    IMAGE_MOUNT="$TEMP/$TARGET_NAME.sparsebundle.mount"
    IESD_MOUNT="$TEMP/$TARGET_NAME.installesd.mount"
    BASE_MOUNT="$TEMP/$TARGET_NAME.basesystem.mount"

    # Validate source
    SOURCE_VALID_EXTENDED=false
    echo "Verifying source..."
    if hdiutil attach "$IESD" -mountpoint "$IESD_MOUNT" -nobrowse -quiet; then
        # Image attached
        if [[ "$VERS" == "osx109" ]]; then
            if [[ -e "$IESD_MOUNT/BaseSystem.dmg" ]] && [[ -e "$IESD_MOUNT/Packages" ]]; then
                # Structure seems normal, base system found
                if hdiutil attach "$IESD_MOUNT/BaseSystem.dmg" -mountpoint "$BASE_MOUNT" -nobrowse -quiet; then
                    # Base system attached
                    if [[ -e "$BASE_MOUNT/$APP" ]]; then
                        # Reasonably certain version is valid
                        SOURCE_VALID_EXTENDED=true
                    fi
                    hdiutil detach "$BASE_MOUNT" -quiet
                fi
            fi
        else
            if [[ -e "$IESD_MOUNT/$APP" ]]; then
                # Reasonably certain version is valid
                SOURCE_VALID_EXTENDED=true
            fi
        fi
        hdiutil detach "$IESD_MOUNT" -quiet
    fi

    if $SOURCE_VALID_EXTENDED; then

        make_"$VERS"_"$FORMAT"

        # Attach final image
        if $ATTACH; then
            echo "Attaching..."
            hdiutil attach "$TARGET" -autoopen -verify -quiet
        fi

    else
        # Source invalid
        rm -rf "$TEMP"
        ERROR="$SELF_NAME: source invalid or wrong version"
        echo "$ERROR" >&2 && syslog -s -l error "$ERROR"
        echo -e "$HELP"
        exit 1
    fi

    # Clean
    echo "Cleaning up..."
    rm -rf "$TEMP"

else
    # Source invalid
    ERROR="$SELF_NAME: source invalid"
    echo "$ERROR" >&2 && syslog -s -l error "$ERROR"
    echo -e "$HELP"
    exit 1
fi

# Done
echo "Done."
exit 0