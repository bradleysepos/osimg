#!/bin/bash
# osximg - create bootable disk images from Mac OS X install files
#
# Version 0.5.0 (2014-04-30)
# Add automatic system version detection, remove -t. Improve file handling.
#
# Version 0.4.2 (2014-04-30)
# Refactor target system version argument handling. Cosmetics.
#
# Version 0.4.1 (2014-04-29)
# Improve validation. Do not require super user to print help/version.
#
# Version 0.4.0 (2014-04-29)
# Update API (osximg source -o path). Consolidate nearly all shared code.
#
# Version 0.3.0 (2014-04-29)
# Fix Lion. Add source validation. Use more robust temporary paths. Refactor.
#
# Version 0.2.0 (2014-04-29)
# Add support for Mountain Lion and Lion. Consolidate some code.
#
# Version 0.1.0 (2014-04-25)
# Initial development. Mavericks supported.

set -e
set -u

SELF="$0"
SELF_NAME=$(basename "$SELF")

# Defaults
APP_OSX109="Install OS X Mavericks.app"
APP_OSX108="Install OS X Mountain Lion.app"
APP_OSX107="Install Mac OS X Lion.app"
ATTACH=false
FORMAT="iso"
OUTPUT=""
SOURCE=""
VERS=""
HELP="\
usage: $SELF_NAME [-hv]
       $SELF_NAME source -o path [-a] [-f format]
where:
   -h  display this help text
   -v  display version information
   -a  attach/mount final image when complete
   -f  specify format/method -- iso (default), apple (createinstallmedia 10.9+)
   -o  specify output path"
VERSION="\
osximg 0.5.0"

# Get source path
if [[ "$#" -gt 0 ]] && [[ ! "${1:0:1}" = "-" ]]; then
    SOURCE="$1"
    shift 1
fi

# Super user only, except when printing help or version information
SUID=$(id -u root)
if [[ "$UID" != "$SUID" ]] && ( [[ "$#" -eq 0 ]] || grep -qv '^-\(h\|v\)' <<< "$1" ); then
    ERROR="$SELF_NAME: cannot run as normal user, try sudo"
    echo "$ERROR" >&2 && syslog -s -l error "$ERROR"
    exit 1
fi

# Handle arguments
while getopts ":af:ho:v" OPT
do
    case "${OPT}"
    in
        a)
            # Attach
            ATTACH=true
            ;;
        f)
            # Method and format
            if ! echo -n "$OPTARG" | grep -q '^\(apple\|iso\)$' >/dev/null; then
                # Invalid option specified
                ERROR="$SELF_NAME: invalid option for -f: $OPTARG"
                echo "$ERROR" >&2 && syslog -s -l error "$ERROR"
                echo -e "$HELP"
                exit 1
            fi
            FORMAT="$OPTARG"
            ;;
        h)
            # Print help and exit
            echo -e "$HELP"
            exit 0
            ;;
        o)
            # Output path
            OUTPUT="$OPTARG"
            ;;
        v)
            # Print version and exit
            echo -e "$VERSION"
            exit 0
            ;;
        :)
            # Option without required argument
            ERROR="$SELF_NAME: option -$OPTARG requires a value"
            echo "$ERROR" >&2 && syslog -s -l error "$ERROR"
            echo -e "$HELP"
            exit 1
            ;;
        \?)
            # Invalid option specified
            ERROR="$SELF_NAME: invalid option: -$OPTARG"
            echo "$ERROR" >&2 && syslog -s -l error "$ERROR"
            echo -e "$HELP"
            exit 1
            ;;
    esac
done

# Validate arguments count
shift $(($OPTIND - 1))
if [[ "$#" -gt 0 ]]; then
    # Too many arguments
    ERROR="$SELF_NAME: too many arguments"
    echo "$ERROR" >&2 && syslog -s -l error "$ERROR"
    echo -e "$HELP"
    exit 1
fi

# Validate paths
if [[ "$SOURCE" == "" ]]; then
    # Source path not specified
    ERROR="$SELF_NAME: source path not specified"
    echo "$ERROR" >&2 && syslog -s -l error "$ERROR"
    echo -e "$HELP"
    exit 1
elif [[ "$OUTPUT" == "" ]]; then
    # Output path not specified
    ERROR="$SELF_NAME: output path not specified"
    echo "$ERROR" >&2 && syslog -s -l error "$ERROR"
    echo -e "$HELP"
    exit 1
elif [[ ! -e "$SOURCE" ]]; then
    # Source path does not exist
    ERROR="$SELF_NAME: source path does not exist: $SOURCE"
    echo "$ERROR" >&2 && syslog -s -l error "$ERROR"
    exit 1
elif [[ -e "$OUTPUT" ]]; then
    # Output path already exists
    ERROR="$SELF_NAME: output path already exists: $OUTPUT"
    echo "$ERROR" >&2 && syslog -s -l error "$ERROR"
    exit 1
fi

# Function to create temporary files
function make_temp {

    # Use output path as location
    TEMP=$(mktemp -d "$OUTPUT Temporary Files XXXXXX")

}

# Function to remove temporary files
function remove_temp {

    # Unmount all temporary file systems and remove temporary files
    if [[ "$TEMP" != "" ]] && [[ -e "$TEMP" ]]; then
        set +e
        hdiutil detach "$TEMP/*.mount" -quiet
        sleep 2
        hdiutil detach "$TEMP/*.mount" -force -quiet
        sleep 1
        rm -rf "$TEMP"
    fi

}

# Function for Mac OS X 10.9 Mavericks, ISO/HFS hybrid bootable
function make_osx109_iso {

    # Attach source
    hdiutil attach "$IESD" -mountpoint "$IESD_MOUNT" -nobrowse -quiet

    # Create temporary image
    echo "Creating temporary image..."
    hdiutil convert "$IESD_MOUNT/BaseSystem.dmg" -o "$IMAGE.sparsebundle" -format UDSB -quiet
    hdiutil resize "$IMAGE.sparsebundle" -size 6g -quiet
    hdiutil attach "$IMAGE.sparsebundle" -mountpoint "$IMAGE_MOUNT" -owners on -nobrowse -quiet

    # Copy system packages
    echo "Copying system packages..."
    rm "$IMAGE_MOUNT/System/Installation/Packages"
    ditto "$IESD_MOUNT/Packages" "$IMAGE_MOUNT/System/Installation/Packages"

    # Eject source volumes
    hdiutil detach "$IESD_MOUNT" -quiet
    hdiutil detach "$IMAGE_MOUNT" -quiet

    # Shrink
    echo "Shrinking image..."
    hdiutil resize -quiet -size min "$IMAGE.sparsebundle"

    # Save final image
    echo "Saving final image..."
    hdiutil makehybrid "$IMAGE.sparsebundle" -o "$IMAGE.iso" -hfs -iso -quiet

    # Rename target
    mv "$IMAGE.iso" "$OUTPUT"

}

# Function for Mac OS X 10.9 Mavericks, Apple USB
function make_osx109_apple {

    # Eject potentially conflicting volume
    CIM_MOUNT="/Volumes/Install OS X Mavericks"
    if [[ -e "$CIM_MOUNT" ]]; then
        hdiutil detach "$CIM_MOUNT" -quiet
        echo "Ejected already mounted volume $CIM_MOUNT to avoid conflicts."
    fi

    # Create temporary image and run createinstallmedia tool
    echo "Creating temporary image..."
    hdiutil create "$IMAGE.sparsebundle" -fs HFS+ -size 8g -type SPARSEBUNDLE -nospotlight -quiet
    hdiutil attach "$IMAGE.sparsebundle" -mountpoint "$IMAGE_MOUNT" -nobrowse -noverify -quiet
    "$SOURCE/Contents/Resources/createinstallmedia" --nointeraction --applicationpath "$SOURCE" --volume "$IMAGE_MOUNT" | grep -v --line-buffered '^\(Done\.\|Copy complete\.\)$'

    # Eject source volume
    hdiutil detach "$CIM_MOUNT" -quiet

    # Shrink
    echo "Shrinking image..."
    hdiutil resize "$IMAGE.sparsebundle" -size min -quiet

    # Save final image
    echo "Saving final image..."
    hdiutil convert "$IMAGE.sparsebundle" -o "$IMAGE.cdr" -format UDTO -quiet

    # Rename target
    mv "$IMAGE.cdr" "$OUTPUT"

}

# Function for Mac OS X 10.8 Mountain Lion, ISO/HFS hybrid bootable
function make_osx108_iso {

    # Save final image
    echo "Saving final image..."
    hdiutil makehybrid "$IESD" -o "$IMAGE.iso" -hfs -iso -quiet

    # Rename target
    mv "$IMAGE.iso" "$OUTPUT"

}

# Function for Mac OS X 10.7 Lion, ISO/HFS hybrid bootable
function make_osx107_iso {

    # Save final image
    echo "Saving final image..."
    hdiutil makehybrid "$IESD" -o "$IMAGE.iso" -hfs -iso -quiet

    # Rename target
    mv "$IMAGE.iso" "$OUTPUT"

}

# Make temporary directory
make_temp

# Make temporary files
OUTPUT_NAME=$(basename "$OUTPUT")
IMAGE="$TEMP/$OUTPUT_NAME"
IMAGE_MOUNT="$TEMP/$OUTPUT_NAME.temp.mount"
IESD_MOUNT="$TEMP/$OUTPUT_NAME.installesd.mount"
BASE_MOUNT="$TEMP/$OUTPUT_NAME.basesystem.mount"

# Detect source version
IESD="$SOURCE/Contents/SharedSupport/InstallESD.dmg"
if ! hdiutil imageinfo -format "$IESD" >/dev/null 2>&1 && hdiutil imageinfo -format "$SOURCE" >/dev/null 2>&1; then
    # Got image
    IESD="$SOURCE"
fi
if hdiutil attach "$IESD" -mountpoint "$IESD_MOUNT" -nobrowse -quiet; then
    # Image attached
    if [[ -e "$IESD_MOUNT/$APP_OSX107" ]]; then
        # Got Lion
        echo "Mac OS X 10.7 Lion detected."
        VERS="osx107"
    elif [[ -e "$IESD_MOUNT/$APP_OSX108" ]]; then
        # Got Mountain Lion
        echo "Mac OS X 10.8 Mountain Lion detected."
        VERS="osx108"
    else
        if hdiutil attach "$IESD_MOUNT/BaseSystem.dmg" -mountpoint "$BASE_MOUNT" -nobrowse -quiet; then
            if [[ -e "$BASE_MOUNT/$APP_OSX109" ]] && [[ -e "$SOURCE/Contents/Resources/createinstallmedia" ]]; then
                # Got Mavericks
                echo "Mac OS X 10.9 Mavericks detected."
                VERS="osx109"
            fi
            hdiutil detach "$BASE_MOUNT" -quiet
        fi
    fi
    hdiutil detach "$IESD_MOUNT" -quiet
fi

# Validate version and format
if [[ "$VERS" == "" ]]; then
    # Source invalid or version not supported
    remove_temp
    ERROR="$SELF_NAME: source invalid or version not supported"
    echo "$ERROR" >&2 && syslog -s -l error "$ERROR"
    exit 1
elif [[ "$FORMAT" == "apple" ]] && [[ "$VERS" != "osx109" ]]; then
    # Format not supported
    remove_temp
    ERROR="$SELF_NAME: format '$FORMAT' (createinstallmedia) not supported for target system versions prior to Mac OS X 10.9 Mavericks"
    echo "$ERROR" >&2 && syslog -s -l error "$ERROR"
    exit 1
fi

# Build image
make_"$VERS"_"$FORMAT"

# Attach final image
if $ATTACH; then
    echo "Attaching..."
    hdiutil attach "$OUTPUT" -autoopen -verify -quiet
fi

# Remove temporary files
echo "Cleaning up..."
remove_temp

# Done
echo "Done."
exit 0
