#!/bin/bash
# osximg - create bootable disk images from Mac OS X install files
#
# Version 0.3.0 (2014-04-29)
# Fix Lion. Add source validation. Use more robust temporary paths. Refactor.
#
# Version 0.2.0 (2014-04-29)
# Add support for Mountain Lion and Lion. Consolidate some code.
#
# Version 0.1.0 (2014-04-25)
# Initial development. Mavericks supported.

set -e
set -u

SELF="$0"
SELF_NAME=$(basename "$SELF")

# Super users only
SUID=$(id -u root)
if [[ "$UID" != "$SUID" ]]; then
    ERROR="$SELF_NAME: cannot run as normal user, try sudo"
    echo "$ERROR" >&2 && syslog -s -l error "$ERROR"
    exit 1
fi

# Handle arguments
ATTACH=false
FORMAT="iso"
SOURCE=""
VERS="osx109"
HELP="\
usage: $SELF_NAME [-hv]
       $SELF_NAME [-a] [-f format] [-i source] [-t version] path
where:
   -h  display this help text
   -v  display version information
   -a  attach/mount final image when complete
   -f  specify format/method -- iso (default), apple (createinstallmedia 10.9+)
   -i  specify source path (default /Applications/Install OS X [Version].app)
   -t  specify target system version --
         Mavericks      (osx109, default)
         Mountain Lion  (osx108)
         Lion           (osx107)"
VERSION="\
osximg 0.3.0"
while getopts ":af:hi:t:v" OPT
do
    case "${OPT}"
    in
        a)
            # Attach
            ATTACH=true
            ;;
        f)
            # Method and format
            if ! echo -n "$OPTARG" | grep -q '^\(apple\|iso\)$' >/dev/null; then
                # Invalid option specified
                ERROR="$SELF_NAME: invalid option for -f: $OPTARG"
                echo "$ERROR" >&2 && syslog -s -l error "$ERROR"
                echo -e "$HELP"
                exit 1
            fi
            FORMAT="$OPTARG"
            ;;
        h)
            # Print help and exit
            echo -e "$HELP"
            exit 0
            ;;
        i)
            # Path to install files
            SOURCE="$OPTARG"
            ;;
        t)
            # Target system version
            if ! echo -n "$OPTARG" | grep -q '^\(Mavericks\|osx109\|Mountain Lion\|osx108\|Lion\|osx107\)$' >/dev/null; then
                # Invalid option specified
                ERROR="$SELF_NAME: invalid option for -t: $OPTARG"
                echo "$ERROR" >&2 && syslog -s -l error "$ERROR"
                echo -e "$HELP"
                exit 1
            fi
            VERS="$OPTARG"
            case "$VERS"
            in
                "Mavericks")
                    VERS="osx109"
            esac
            ;;
        v)
            # Print version and exit
            echo -e "$VERSION"
            exit 0
            ;;
        :)
            # Option without required argument
            ERROR="$SELF_NAME: option -$OPTARG requires a value"
            echo "$ERROR" >&2 && syslog -s -l error "$ERROR"
            echo -e "$HELP"
            exit 1
            ;;
        \?)
            # Invalid option specified
            ERROR="$SELF_NAME: invalid option: -$OPTARG"
            echo "$ERROR" >&2 && syslog -s -l error "$ERROR"
            echo -e "$HELP"
            exit 1
            ;;
    esac
done

# Get paths
shift $(($OPTIND - 1))
TARGET=""
if [[ "$#" -eq 1 ]]; then
    TARGET="$1"
elif [[ "$#" -gt 1 ]]; then
    # Too many arguments
    ERROR="$SELF_NAME: too many arguments"
    echo "$ERROR" >&2 && syslog -s -l error "$ERROR"
    echo -e "$HELP"
    exit 1
else
    # Path not specified
    ERROR="$SELF_NAME: path not specified"
    echo "$ERROR" >&2 && syslog -s -l error "$ERROR"
    echo -e "$HELP"
    exit 1
fi

# Function for Mac OS X 10.9 Mavericks, ISO/HFS hybrid bootable
function make_osx109_iso {

    # Default paths
    APP="Install OS X Mavericks.app"
    if [[ "$SOURCE" == "" ]]; then
        SOURCE="/Applications/$APP"
    fi
    IESD="$SOURCE/Contents/SharedSupport/InstallESD.dmg"

    # Validate source
    SOURCE_FOUND=false
    if [[ -e "$SOURCE" ]]; then
        if hdiutil imageinfo -format "$IESD" >/dev/null 2>&1; then
            # Got app bundle, image located
            SOURCE_FOUND=true;
        elif hdiutil imageinfo -format "$SOURCE" >/dev/null 2>&1; then
            # Got image
            SOURCE_FOUND=true;
            IESD="$SOURCE"
        fi
    fi

    if $SOURCE_FOUND; then

        # Create temporary directories
        TARGET_NAME=$(basename "$TARGET")
        TEMP=$(mktemp -d "$TARGET Temporary Files XXXXXX")
        IMAGE="$TEMP/$TARGET_NAME.sparsebundle"
        IMAGE_MOUNT="$TEMP/$TARGET_NAME.sparsebundle.mount"
        IESD_MOUNT="$TEMP/$TARGET_NAME.installesd.mount"
        BASE_MOUNT="$TEMP/$TARGET_NAME.basesystem.mount"

        # Attach and validate source
        SOURCE_VALID=false
        echo "Verifying source..."
        if hdiutil attach "$IESD" -mountpoint "$IESD_MOUNT" -nobrowse -quiet; then
            # Image attached
            if [[ -e "$IESD_MOUNT/BaseSystem.dmg" ]] || [[ -e "$IESD_MOUNT/Packages" ]]; then
                # Structure seems normal, base system found
                if hdiutil attach "$IESD_MOUNT/BaseSystem.dmg" -mountpoint "$BASE_MOUNT" -nobrowse -quiet; then
                    # Base system attached
                    if [[ -e "$BASE_MOUNT/$APP" ]]; then
                        # Reasonably certain this is Mavericks
                        SOURCE_VALID=true
                    fi
                    hdiutil detach "$BASE_MOUNT" -quiet
                fi
            fi
        fi

        if $SOURCE_VALID; then

            # Create temporary image
            echo "Creating temporary image..."
            hdiutil convert "$IESD_MOUNT/BaseSystem.dmg" -o "$IMAGE" -format UDSB -quiet
            hdiutil resize "$IMAGE" -size 6g -quiet
            hdiutil attach "$IMAGE" -mountpoint "$IMAGE_MOUNT" -owners on -nobrowse -quiet

            # Copy system packages
            echo "Copying system packages..."
            rm "$IMAGE_MOUNT/System/Installation/Packages"
            ditto "$IESD_MOUNT/Packages" "$IMAGE_MOUNT/System/Installation/Packages"

            # Eject source volumes
            hdiutil detach "$IESD_MOUNT" -quiet
            hdiutil detach "$IMAGE_MOUNT" -quiet

            # Shrink
            echo "Shrinking image..."
            hdiutil resize -quiet -size min "$IMAGE"

            # Save final image
            echo "Saving final image..."
            hdiutil makehybrid "$IMAGE" -o "$TARGET" -hfs -iso -quiet

            # Clean
            echo "Cleaning up..."
            rm -rf "$TEMP"

        else
            # Source not valid
            hdiutil detach "$IESD_MOUNT" -quiet && rm -rf "$TEMP"
            ERROR="$SELF_NAME: source invalid or wrong version"
            echo "$ERROR" >&2 && syslog -s -l error "$ERROR"
            echo -e "$HELP"
            exit 1
        fi
    else
        # Source not found
        ERROR="$SELF_NAME: source not found"
        echo "$ERROR" >&2 && syslog -s -l error "$ERROR"
        echo -e "$HELP"
        exit 1
    fi

}

# Function for Mac OS X 10.9 Mavericks, Apple USB
function make_osx109_apple {

    # Default paths
    APP="Install OS X Mavericks.app"
    if [[ "$SOURCE" == "" ]]; then
        SOURCE="/Applications/$APP"
    fi
    IESD="$SOURCE/Contents/SharedSupport/InstallESD.dmg"
    CIM="$SOURCE/Contents/Resources/createinstallmedia"

    # Validate source
    SOURCE_FOUND=false
    if [[ -e "$SOURCE" ]]; then
        if hdiutil imageinfo -format "$IESD" >/dev/null 2>&1; then
            # Got app bundle, image located
            SOURCE_FOUND=true;
        fi
    fi

    # Validate createinstallmedia
    CIM_FOUND=false
    if [[ -e "$CIM" ]]; then
        CIM_FOUND=true;
    fi

    if $SOURCE_FOUND && $CIM_FOUND; then

        # Create temporary directories
        TARGET_NAME=$(basename "$TARGET")
        TEMP=$(mktemp -d "$TARGET Temporary Files XXXXXX")
        IMAGE="$TEMP/$TARGET_NAME.sparsebundle"
        IMAGE_MOUNT="$TEMP/$TARGET_NAME.sparsebundle.mount"
        IESD_MOUNT="$TEMP/$TARGET_NAME.installesd.mount"
        BASE_MOUNT="$TEMP/$TARGET_NAME.basesystem.mount"

        # Attach and validate source
        SOURCE_VALID=false
        echo "Verifying source..."
        if hdiutil attach "$IESD" -mountpoint "$IESD_MOUNT" -nobrowse -quiet; then
            # Image attached
            if [[ -e "$IESD_MOUNT/BaseSystem.dmg" ]] || [[ -e "$IESD_MOUNT/Packages" ]]; then
                # Structure seems normal, base system found
                if hdiutil attach "$IESD_MOUNT/BaseSystem.dmg" -mountpoint "$BASE_MOUNT" -nobrowse -quiet; then
                    # Base system attached
                    if [[ -e "$BASE_MOUNT/$APP" ]]; then
                        # Reasonably certain this is Mavericks
                        SOURCE_VALID=true
                    fi
                    hdiutil detach "$BASE_MOUNT" -quiet
                fi
            fi
            hdiutil detach "$IESD_MOUNT" -quiet
        fi

        if $SOURCE_VALID; then

            # Eject potentially conflicting volume
            CIM_VOLUME="Install OS X Mavericks"
            if [[ -e "/Volumes/$CIM_VOLUME" ]]; then
                hdiutil detach "/Volumes/$CIM_VOLUME" -quiet
                echo "Ejected already mounted volume /Volumes/$CIM_VOLUME to avoid conflicts."
            fi

            # Create temporary image and run createinstallmedia tool
            echo "Creating temporary image..."
            hdiutil create "$IMAGE" -fs HFS+ -size 8g -type SPARSEBUNDLE -nospotlight -quiet
            hdiutil attach "$IMAGE" -mountpoint "$IMAGE_MOUNT" -nobrowse -noverify -quiet
            "$CIM" --nointeraction --applicationpath "$SOURCE" --volume "$IMAGE_MOUNT" | grep -v --line-buffered '^\(Done\.\|Copy complete\.\)$'
            exit

            # Eject source volume
            hdiutil detach -quiet "/Volumes/$CIM_VOLUME"

            # Shrink
            echo "Shrinking image..."
            hdiutil resize "$IMAGE" -size min -quiet
    
            # Save final image
            echo "Saving final image..."
            hdiutil convert "$IMAGE" -o "$IMAGE.cdr" -format UDTO -quiet

            # Rename target
            mv "$IMAGE.cdr" "$TARGET"
    
            # Clean
            echo "Cleaning up..."
            rm -rf "$TEMP"

        else
            # Source not valid
            rm -rf "$TEMP"
            ERROR="$SELF_NAME: source invalid or wrong version"
            echo "$ERROR" >&2 && syslog -s -l error "$ERROR"
            echo -e "$HELP"
            exit 1
        fi
    else
        # Source not found
        ERROR="$SELF_NAME: source not found"
        echo "$ERROR" >&2 && syslog -s -l error "$ERROR"
        echo -e "$HELP"
        exit 1
    fi

}

# Function for Mac OS X 10.8 Mountain Lion, ISO/HFS hybrid bootable
function make_osx108_iso {

    # Default paths
    APP="Install OS X Mountain Lion.app"
    if [[ "$SOURCE" == "" ]]; then
        SOURCE="/Applications/$APP"
    fi
    IESD="$SOURCE/Contents/SharedSupport/InstallESD.dmg"

    # Validate source
    SOURCE_FOUND=false
    if [[ -e "$SOURCE" ]]; then
        if hdiutil imageinfo -format "$IESD" >/dev/null 2>&1; then
            # Got app bundle, image located
            SOURCE_FOUND=true;
        elif hdiutil imageinfo -format "$SOURCE" >/dev/null 2>&1; then
            # Got image
            SOURCE_FOUND=true;
            IESD="$SOURCE"
        fi
    fi

    if $SOURCE_FOUND; then

        # Create temporary directories
        TARGET_NAME=$(basename "$TARGET")
        TEMP=$(mktemp -d "$TARGET Temporary Files XXXXXX")
        IMAGE="$TEMP/$TARGET_NAME.sparsebundle"
        IMAGE_MOUNT="$TEMP/$TARGET_NAME.sparsebundle.mount"
        IESD_MOUNT="$TEMP/$TARGET_NAME.installesd.mount"

        # Attach and validate source
        SOURCE_VALID=false
        echo "Verifying source..."
        if hdiutil attach "$IESD" -mountpoint "$IESD_MOUNT" -nobrowse -quiet; then
            # Image attached
            if [[ -e "$IESD_MOUNT/$APP" ]]; then
                # Reasonably certain this is Mountain Lion
                SOURCE_VALID=true
            fi
            hdiutil detach "$IESD_MOUNT" -quiet
        fi

        if $SOURCE_VALID; then

            # Save final image
            echo "Saving final image..."
            hdiutil makehybrid "$IESD" -o "$TARGET" -hfs -iso -quiet

            # Clean
            echo "Cleaning up..."
            rm -rf "$TEMP"

        else
            # Source not valid
            hdiutil detach "$IESD_MOUNT" -quiet && rm -rf "$TEMP"
            ERROR="$SELF_NAME: source invalid or wrong version"
            echo "$ERROR" >&2 && syslog -s -l error "$ERROR"
            echo -e "$HELP"
            exit 1
        fi
    else
        # Source not found
        ERROR="$SELF_NAME: source not found"
        echo "$ERROR" >&2 && syslog -s -l error "$ERROR"
        echo -e "$HELP"
        exit 1
    fi

}

# Function for Mac OS X 10.7 Lion, ISO/HFS hybrid bootable
function make_osx107_iso {

    # Default paths
    APP="Install Mac OS X Lion.app"
    if [[ "$SOURCE" == "" ]]; then
        SOURCE="/Applications/$APP"
    fi
    IESD="$SOURCE/Contents/SharedSupport/InstallESD.dmg"

    # Validate source
    SOURCE_FOUND=false
    if [[ -e "$SOURCE" ]]; then
        if hdiutil imageinfo -format "$IESD" >/dev/null 2>&1; then
            # Got app bundle, image located
            SOURCE_FOUND=true;
        elif hdiutil imageinfo -format "$SOURCE" >/dev/null 2>&1; then
            # Got image
            SOURCE_FOUND=true;
            IESD="$SOURCE"
        fi
    fi

    if $SOURCE_FOUND; then

        # Create temporary directories
        TARGET_NAME=$(basename "$TARGET")
        TEMP=$(mktemp -d "$TARGET Temporary Files XXXXXX")
        IMAGE="$TEMP/$TARGET_NAME.sparsebundle"
        IMAGE_MOUNT="$TEMP/$TARGET_NAME.sparsebundle.mount"
        IESD_MOUNT="$TEMP/$TARGET_NAME.installesd.mount"

        # Attach and validate source
        SOURCE_VALID=false
        echo "Verifying source..."
        if hdiutil attach "$IESD" -mountpoint "$IESD_MOUNT" -nobrowse -quiet; then
            # Image attached
            if [[ -e "$IESD_MOUNT/$APP" ]]; then
                # Reasonably certain this is Lion
                SOURCE_VALID=true
            fi
            hdiutil detach "$IESD_MOUNT" -quiet
        fi

        if $SOURCE_VALID; then

            # Save final image
            echo "Saving final image..."
            hdiutil makehybrid "$IESD" -o "$TARGET" -hfs -iso -quiet

            # Clean
            echo "Cleaning up..."
            rm -rf "$TEMP"

        else
            # Source not valid
            hdiutil detach "$IESD_MOUNT" -quiet && rm -rf "$TEMP"
            ERROR="$SELF_NAME: source invalid or wrong version"
            echo "$ERROR" >&2 && syslog -s -l error "$ERROR"
            echo -e "$HELP"
            exit 1
        fi
    else
        # Source not found
        ERROR="$SELF_NAME: source not found"
        echo "$ERROR" >&2 && syslog -s -l error "$ERROR"
        echo -e "$HELP"
        exit 1
    fi

}

# Validate version and format
if [[ "$FORMAT" == "apple" ]] && [[ "$VERS" != "osx109" ]]; then
    # Format not supported
    ERROR="$SELF_NAME: format '$FORMAT' (createinstallmedia) not supported prior to Mac OS X 10.9 Mavericks"
    echo "$ERROR" >&2 && syslog -s -l error "$ERROR"
    echo -e "$HELP"
    exit 1
fi

# Validate output paths
if [[ -e "$TARGET" ]]; then
    # Path already exists
    ERROR="$SELF_NAME: output path exists: $TARGET"
    echo "$ERROR" >&2 && syslog -s -l error "$ERROR"
    echo -e "$HELP"
    exit 1
fi

make_"$VERS"_"$FORMAT"

# Attach final image
if $ATTACH; then
    echo "Attaching..."
    hdiutil attach "$TARGET" -autoopen -verify -quiet
fi

# Done
echo "Done."
exit 0